
MOSbot_RGB_BLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fc7  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000931  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005a0  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a9  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000053b  00000000  00000000  00002a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	81 d0       	rcall	.+258    	; 0x1b6 <main>
  b4:	03 c1       	rjmp	.+518    	; 0x2bc <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_Z11USART1_Initv>:
			// wait until sending is possible
		}
		UDR1 = data[i];
	}
	uart1_char_send(0x0D);	// \r
	uart1_char_send(0x0A);	// \n
  b8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  bc:	89 e1       	ldi	r24, 0x19	; 25
  be:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
  c2:	e9 ec       	ldi	r30, 0xC9	; 201
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 69       	ori	r24, 0x98	; 152
  ca:	80 83       	st	Z, r24
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
  d2:	08 95       	ret

000000d4 <_Z15uart1_char_sendc>:
  d4:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  d8:	95 ff       	sbrs	r25, 5
  da:	fc cf       	rjmp	.-8      	; 0xd4 <_Z15uart1_char_sendc>
  dc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  e0:	08 95       	ret

000000e2 <_Z14uart1_int_sendi>:
  e2:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  e6:	95 ff       	sbrs	r25, 5
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <_Z14uart1_int_sendi>
  ea:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	f1 df       	rcall	.-30     	; 0xd4 <_Z15uart1_char_sendc>
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	ef cf       	rjmp	.-34     	; 0xd4 <_Z15uart1_char_sendc>
  f6:	08 95       	ret

000000f8 <_Z7rgb_lediii>:

//###############################################################################################
// enable/disable functions #####################################################################

void rgb_led(int red, int green, int blue)
{
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	8b 01       	movw	r16, r22
 102:	ea 01       	movw	r28, r20
	if (red)
 104:	89 2b       	or	r24, r25
 106:	39 f0       	breq	.+14     	; 0x116 <_Z7rgb_lediii+0x1e>
	{
		DDRD |= (1<<DDD6); 							// HIGH = LED on
 108:	8a b1       	in	r24, 0x0a	; 10
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	8a b9       	out	0x0a, r24	; 10
		uart1_int_send(1);
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	e7 df       	rcall	.-50     	; 0xe2 <_Z14uart1_int_sendi>
 114:	06 c0       	rjmp	.+12     	; 0x122 <_Z7rgb_lediii+0x2a>
	}
	else
	{		
		DDRD &= ~(1<<DDD6);							// LOW = LED off
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8f 7b       	andi	r24, 0xBF	; 191
 11a:	8a b9       	out	0x0a, r24	; 10
		uart1_int_send(2);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	e0 df       	rcall	.-64     	; 0xe2 <_Z14uart1_int_sendi>
	}
	
	if (green)
 122:	01 2b       	or	r16, r17
 124:	39 f0       	breq	.+14     	; 0x134 <_Z7rgb_lediii+0x3c>
	{
		DDRD |= (1<<DDD5); 							// HIGH = LED on
 126:	8a b1       	in	r24, 0x0a	; 10
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	8a b9       	out	0x0a, r24	; 10
		uart1_int_send(3);
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	d8 df       	rcall	.-80     	; 0xe2 <_Z14uart1_int_sendi>
 132:	06 c0       	rjmp	.+12     	; 0x140 <_Z7rgb_lediii+0x48>
	}
	else
	{		
		DDRD &= ~(1<<DDD5);							// LOW = LED off
 134:	8a b1       	in	r24, 0x0a	; 10
 136:	8f 7d       	andi	r24, 0xDF	; 223
		uart1_int_send(4);
 138:	8a b9       	out	0x0a, r24	; 10
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	d1 df       	rcall	.-94     	; 0xe2 <_Z14uart1_int_sendi>
	}
	
	if (blue)
 140:	cd 2b       	or	r28, r29
 142:	39 f0       	breq	.+14     	; 0x152 <_Z7rgb_lediii+0x5a>
	{
		DDRD |= (1<<DDD4); 							// HIGH = LED on
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	80 61       	ori	r24, 0x10	; 16
		uart1_int_send(5);
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	85 e0       	ldi	r24, 0x05	; 5
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	c9 df       	rcall	.-110    	; 0xe2 <_Z14uart1_int_sendi>
 150:	06 c0       	rjmp	.+12     	; 0x15e <_Z7rgb_lediii+0x66>
	}
	else
	{		
		DDRD &= ~(1<<DDD4);							// LOW = LED off
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	8f 7e       	andi	r24, 0xEF	; 239
		uart1_int_send(6);
 156:	8a b9       	out	0x0a, r24	; 10
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	c2 df       	rcall	.-124    	; 0xe2 <_Z14uart1_int_sendi>
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <_Z14ble_vcc_enableb>:


void ble_vcc_enable(bool val)
{
	if (val)
 168:	88 23       	and	r24, r24
 16a:	21 f0       	breq	.+8      	; 0x174 <_Z14ble_vcc_enableb+0xc>
	{
		PORTC |= (1<<PC5); 							// HIGH = VCC BLE on
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	88 b9       	out	0x08, r24	; 8
 172:	08 95       	ret
	}
	else
	{		
		PORTC &= ~(1<<PC5);							// LOW = VCC BLE off
 174:	88 b1       	in	r24, 0x08	; 8
 176:	8f 7d       	andi	r24, 0xDF	; 223
 178:	88 b9       	out	0x08, r24	; 8
 17a:	08 95       	ret

0000017c <_Z18ble_hardware_resetb>:
}


void ble_hardware_reset(bool val)
{
	if (val)
 17c:	88 23       	and	r24, r24
 17e:	21 f0       	breq	.+8      	; 0x188 <_Z18ble_hardware_resetb+0xc>
	{
		PORTC &= ~(1<<PC4);							// LOW = RESET BLE Module
 180:	88 b1       	in	r24, 0x08	; 8
 182:	8f 7e       	andi	r24, 0xEF	; 239
 184:	88 b9       	out	0x08, r24	; 8
 186:	08 95       	ret
	}
	else
	{
		PORTC |= (1<<PC4); 							// HIGH = normal function
 188:	88 b1       	in	r24, 0x08	; 8
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	88 b9       	out	0x08, r24	; 8
 18e:	08 95       	ret

00000190 <_Z10ble_enablev>:
//###############################################################################################
// RN4871 BLE functions #########################################################################

void ble_enable()
{
	ble_hardware_reset(true);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	f4 df       	rcall	.-24     	; 0x17c <_Z18ble_hardware_resetb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e1       	ldi	r24, 0x1F	; 31
 196:	9e e4       	ldi	r25, 0x4E	; 78
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <_Z10ble_enablev+0x8>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <_Z10ble_enablev+0xe>
 19e:	00 00       	nop
	_delay_ms(5);
	ble_vcc_enable(true);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	e2 df       	rcall	.-60     	; 0x168 <_Z14ble_vcc_enableb>
 1a4:	8f e3       	ldi	r24, 0x3F	; 63
 1a6:	9c e9       	ldi	r25, 0x9C	; 156
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <_Z10ble_enablev+0x18>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_Z10ble_enablev+0x1e>
	_delay_ms(10);
	ble_hardware_reset(false);
 1ae:	00 00       	nop
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	e4 cf       	rjmp	.-56     	; 0x17c <_Z18ble_hardware_resetb>
 1b4:	08 95       	ret

000001b6 <main>:
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	81 ee       	ldi	r24, 0xE1	; 225
 1ba:	94 e0       	ldi	r25, 0x04	; 4
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x6>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x10>
 1c6:	00 00       	nop
int main()
{
	_delay_ms(100);							// some boot time for ?C

	// PORTA IO direction
	DDRA = 0x00;							// set ADC port pins to input
 1c8:	11 b8       	out	0x01, r1	; 1
											//				 for lipo voltage PA3
											//				 for distance calculation PA4

	// PORTB IO direction
	DDRB = 0x00;							// set to input
 1ca:	14 b8       	out	0x04, r1	; 4
											//				 for interrupt PB2
	DDRB |= (1<<DDB3)|(1<<DDB4);			// set to output for MOTORs (PWM)
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	88 61       	ori	r24, 0x18	; 24
 1d0:	84 b9       	out	0x04, r24	; 4

	// PORTC IO direction
	DDRC = 0x00;							// set to input
 1d2:	17 b8       	out	0x07, r1	; 7
											//				 for LIPO charge status PC3
	DDRC |= (1<<DDC4);						// set to output for BLE reset
 1d4:	87 b1       	in	r24, 0x07	; 7
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<DDC5);						// set to output for VCC BLE enable/disable
 1da:	87 b1       	in	r24, 0x07	; 7
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<DDC6);						// set to output for VCC MOTORs enable/disable
 1e0:	87 b1       	in	r24, 0x07	; 7
 1e2:	80 64       	ori	r24, 0x40	; 64
 1e4:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<DDC7);						// set to output for VCC Reference enable/disable
 1e6:	87 b1       	in	r24, 0x07	; 7
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;							// set low
 1ec:	18 b8       	out	0x08, r1	; 8


	// PORTD IO direction
	DDRD = 0x00;							// set to input
 1ee:	1a b8       	out	0x0a, r1	; 10
											//				 for USER button PD7
	PORTD &= ~( (1<<PD4) | (1<<PD5) | (1<<PD5));// 			 for RGB LED
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	8f 7c       	andi	r24, 0xCF	; 207
 1f4:	8b b9       	out	0x0b, r24	; 11
	
	
	USART1_Init();
 1f6:	60 df       	rcall	.-320    	; 0xb8 <_Z11USART1_Initv>


	//*******************************************************************************************
	// LED test *********************************************************************************

	rgb_led(1,0,0);
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	79 df       	rcall	.-270    	; 0xf8 <_Z7rgb_lediii>
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	83 ed       	ldi	r24, 0xD3	; 211
 20a:	90 e3       	ldi	r25, 0x30	; 48
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x56>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x60>
 216:	00 00       	nop
	_delay_ms(1000);
	rgb_led(0,1,0);
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	69 df       	rcall	.-302    	; 0xf8 <_Z7rgb_lediii>
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	83 ed       	ldi	r24, 0xD3	; 211
 22a:	90 e3       	ldi	r25, 0x30	; 48
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x76>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x80>
 236:	00 00       	nop
	_delay_ms(1000);
	rgb_led(0,0,1);
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	59 df       	rcall	.-334    	; 0xf8 <_Z7rgb_lediii>
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	83 ed       	ldi	r24, 0xD3	; 211
 24a:	90 e3       	ldi	r25, 0x30	; 48
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <main+0x96>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0xa0>
 256:	00 00       	nop
	_delay_ms(1000);
	rgb_led(0,0,0);
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	49 df       	rcall	.-366    	; 0xf8 <_Z7rgb_lediii>
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	83 ed       	ldi	r24, 0xD3	; 211
 26a:	90 e3       	ldi	r25, 0x30	; 48
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0xb6>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0xc0>
	_delay_ms(1000);


	// ******************************************************************************************
	ble_enable();
 276:	00 00       	nop
 278:	8b df       	rcall	.-234    	; 0x190 <_Z10ble_enablev>
	//uart1_string_send_n("text an BLE Modul");

	while(1)
	{
		rgb_led(1,0,0);
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	38 df       	rcall	.-400    	; 0xf8 <_Z7rgb_lediii>
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	83 ed       	ldi	r24, 0xD3	; 211
 28c:	90 e3       	ldi	r25, 0x30	; 48
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0xd8>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0xe2>
		_delay_ms(1000);
		//rgb_led(0,1,0);
		//_delay_ms(2000);
		rgb_led(0,0,0);
 298:	00 00       	nop
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	28 df       	rcall	.-432    	; 0xf8 <_Z7rgb_lediii>
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	83 e2       	ldi	r24, 0x23	; 35
 2ac:	94 ef       	ldi	r25, 0xF4	; 244
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0xf8>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x102>
 2b8:	00 00       	nop
 2ba:	df cf       	rjmp	.-66     	; 0x27a <main+0xc4>

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
